# -*- mode: conf -*-

### Basic organisation

# The basic unit of organisation is a brace-delimited block which
# generally contains a sequence of definitions in the form `key :
# value`. We call this a 'property form'.

example-1: {
  x: 1
  y: 2
}

# The top level in a source file is implicitly a block and so contains
# definitions in the same form. So `example-block` is a key in the top
# level block and the value of the definition is a block.

# As in Ruby and Elixir, a: b is actually syntactic sugar for a pair
# of [:a, b] so the above is equivalent to the following (where the
# leading stereotype metadata is a hint to the export to render as a
# map in JSON or YAML.

# ` { stereotype: :associative }
# example-2: [
#   [:x, 1],
#   [:y, 2]
# ]

# ...so blocks are actually association lists - order *is*
# significant.

# This is exploited to splice sequences of key value pairs into a
# block. TODO: how.

# Commas or semicolons or other expression terminators are not
# required so there is a some parser overhead in searching forward for
# the colon.

# All evaluation is lazy so a property is essentially equivalent to a
# no-arg function.

# Another form of colon-sugaring allows the definition of
# functions. We call this 'function form'.

example-4: {
  f(a, b) : "a is {{a}} and b is {{b}}"
}

# ...which is equivalent to:
# -example-5: {
#   [:f, lambda(a,b)."a is {a} and b is {b}"]
# }
# ...or would be if a lambda form existed. TODO: does it?

# Property forms exist at the top level too. The top level is just a
# privileged block.
configured-greeting: "well hello"

### Basic operations and value syntax

# String interpolation can be used to insert string values into a
# template. Note also a // syntax for assigning various types of
# metadata to an expression, in this case an assertion:
some-doc: "{{configured-greeting}} world" // { assert: "well hello world" }

# We'll revisit // later.

# We can define a function form and use both local arguments and
# closed-over environment values.
greet(name): { greeting: "{{configured-greeting}} {{name}}" }

# Or we can use a property form with placeholders
grand-gesture(x): "{{x}} universe"

# ...and then be called explicitly
other-doc: grand-gesture(configured-greeting)

  // { assert: "well hello universe" }
