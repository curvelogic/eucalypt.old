# Example of using eucalypt to define infrastructure by generating
# CloudFormation JSON templates.

## Library of generic CloudFormation functions and constants

` "Provide an outline block for a CloudFormation template"
base-template(desc): {
  AWSTemplateFormatVersion: "2010-09-09"
  Description: desc
  Parameters: {}
  Conditions: {}
  Resources: {}
  Outputs: {}
}

` "Provide an outline parameter block"
param(desc, type): {
  Description: desc
  Type: type 
}

` { doc: "AWS entity types" export: :suppress }
type: {
  vpc: "AWS::EC2::VPC"
  subnet: "AWS::EC2::Subnet"
  key: "AWS::EC2::KeyPair::KeyName"
  igw: "AWS::EC2::InternetGateway"
  vpc-igw: "AWS::EC2::VPCGatewayAttachment"
  hosted-zone: "AWS::Route53::HostedZone"
  string: "String"
}

` { doc: "Basic VPC block for customisation" export: :suppress }
base-vpc: {
  Type: type.vpc
  Properties: {}
}

` { doc: "Basic subnet for customisation" export: :suppress }
base-subnet(vpc, az, cidr, public-ip): {
  Type: type.subnet
  Properties: {
    AvailabilityZone: az
  }
}

` { doc: "Basic IGW for customisation" export: :suppress }
base-igw: {
  Type: type.igw
}

tagged(tags, b):
  b {
    Properties: { Tags: tags }
  }

` "All the Fn:: incantations we might need"
fn: {
  ref(label): {
    'Fn::Ref': label
  }

  ` "CloudFormation fn to join with char"
  join(char, vals): {
    'Fn::Join': [char, vals]
  }

  ` "CloudFormation fn to join without intervening char"
  cat(vals): {
    'Fn::Join': ["", vals]
  }
}


as-tag(item): { Key: item key Value: item value }
to-tags(b): b elements map(as-tag)

# Template

` :suppress
refs: {
  env: fn.ref("EnvironmentName")
}

` "A basic tag map for any entity. Invoke to-tags once merged with other"
tagmap(suffix): {
  Name: [refs.env, suffix] fn.cat
  Environment: refs.env
}

` :suppress
region: "eu-west-1"

` :suppress
zones: ["a", "b", "c"] map(str.prepend(region))

` "Our VPC"
vpc: base-vpc {
  Properties: {
    CidrBlock: "172.28.0.0/16"
    EnableDnsSupport: "true"
    EnableDnsHostnames: "true"
    InstanceTenancy: "default"
    Tags: tagmap("VPC") to-tags
  }
}

` "An internet gateway with tags"
igw: base-igw tagged(tagmap("IGW") to-tags)

` :todo
dmz-cidr(az): {
}

dmz-subnet(az):
  base-subnet(vpc, az, dmz-cidr(az), true)
  tagged(tagmap("Subnet" str.append(az)) to-tags)

dmz-name(az): "OurDMZSubnet" str.append(az) sym

dmz-subnets:
  zip-kv(zones map(dmz-name),
         zones map(dmz-subnet)) 

check: dmz-subnets

# ` { doc: "The final template" target: "vpc" }
# template:
#   base-template("A virtual private cloud")
  
#   {
#     Parameters: {
#       KeyPair: param("Key pair to use", type.key)
#       EnvironmentName: param("Environment name", type.string)
#     }
#   }
  
#   {
#     Resources: {
#       OurVPC: vpc
#       OurInternetGateway: igw
#       # OurVPCGatewayAttachment: attach(OurVPC, OurInternetGateway)
#     } dmz-subnets
#   }
